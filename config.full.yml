Environment:
  # Уровень логов, при отсутсвии данного поля билдер сгенерирует его сам
  # ERROR - Критическая ошибкам, если обнаружена такая - обратиться к разработчикам. В случае такой ошибки скрипт завершается
  # WARN - Критическая ошибка, но не настолько, чтобы завершать скрипт, при обнаружении - обратиться к разработчикам
  # INFO - Инфо логи, с основной информацией, например хеши отправки, номер отсканированного блока, рещультат выполнения программы
  # DEBUG - Дебаг логи с дополнительной информацией о ходе выполнения программы. Можной использовать, если возник ERROR или WARN для передачи дополнительной информации разработчикам
  # В LogLevel пользователь ставит уровень, ниже которого не выовдить логи. Например, если пользователь поставил WARN, то логи будут уровня ERROR и WARN включительно.
  # Вот иерархия уровней: ERROR <- WARN <- INFO <- DEBUG. Рекумендуемая настройка INFO, в этом случае будут выводиться ERROR, WARN и INFO логи
  # Необзяатаельный параметр, по умолчанию INFO
  LogLevel: INFO
Utils:
  # Блок шифрования обязателен, но если его не будет, билдер его сгенерирует
  Encryption:
    # Шифровать ли передаваемую информацию с InitiateTransferEvent на стороне сервера или передавать ее в открытом виде.
    # Рекомендуется шифровать
    # Необязательный параметр, по умолчанию программа будет считать, что false
    EncryptPayload: true
    # Ключ шифрования, можете сгенерировать на своей стороне, либо билдер сам сгенерируется
    # Обяязательнный параметр
    Key: key
    # Соль шифрования, можете сгенерировать на своей стороне, либо билдер сам сгенерируется
    # Обяязательнный параметр
    Salt: salt
    # Метод шифрования, доступные методы: AES-{128/192/256}-{CBC/OFB/CFB/CTR}
    # Рекомендуемый метод: AES-256-CBC
    # Обяязательнный параметр
    CipherMethod: "AES-256-CBC"
  # Блок базы данных обязателен, но если его не будет, билдер его сгенерирует сам
  # Поддерживается PostgreSQL
  Db:
    # Хост базы данных, обязательное поле
    # Обратите внимание, если указан asterizm-db, то билдер будет его поднимать внутри docker
    Host: asterizm-db
    # Порт базы данных, обязательное поле
    Port: 5432
    # Имя базы данных, обязательное поле
    Name: db
    # Имя пользователя базы данных, обязательное поле
    User: user
    # Пароль базы данных, обязательное поле, при отсуствитсвии билдер его сгенерирует сам
    Password: password
  # Блок релея, обязателен к заполнению. Если его не будет, то билдер завершится с ошибкой.
  AsterizmTranslator:
    # хост релея
    Host: https://tr.asterizm.io
    # апи ключ релея
    ApiKey: "13b7AYfdKsYqQiQa7Bv9twgeQzLhZAayTXK8MbqQ1d9Kcw49"
Nodes:
  # Необязательноя поле. Если true - то ивенты будут отправляться по сортированному полю Nonce, по умолчанию false
  # Если поля нет, то билдер поставит значение по умолчанию
  ForceOrder: false
  # Структура передаваемой информации по ABI. Структура должна соотвествовать передаваему информации в точном порядке
  # Поле обязательно только в том случае, если вы будете передавать информацию из сетей с раличными виртуальными машинами. В ином случае - программа не будет его использовать
  # Например если вы передаете информацию из ETH в BSC, то поле необязательно. А если из ETH в EVER, то поле обзятельно.
  # Допусим вы передаете информацию о дате рождения в формате таймстемп и имени abi.ecnode(1682079822, "John"), тогда в PayloadStruct укажите ["uint16", "string"]
  # Поддердживаемые типы данных: bool, string, bytes, int{size} (int8, int16, etc), uint{size} (uint8, uint16, etc)
  # Размерность int и uint должна быть от 8 до 256 и делимая без остатка на 8
  # Если поля нет, то билдер оставит пустой массив
  PayloadStruct: ["uint256", "uint256", "uint256", "uint256", "uint8"]
  List:
    # Список сетей, в которых будет запущен сканнер
    # Если список будет пустой, то билдер завершится с ошибкой
    # Список поддерживаемых EVM-сетей: ETH, POL, OPT, AUR, FTM, CEL, AVA, ARB, BOB, BSC, XVM, PZK, BTG
    # Список поддерживаемых TVM-сетей: EVER, VNM
    ETH:
      # RPC урл, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      RPC: https://rpc-url
      # Chain Id, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      ChainId: chainId
      # Адрес, на который задеплоен клиентский контракт, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      ContractAddress: contractAddress
      # Адрес, через который будет отправлятсься информация в блокчейн, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      # Обратите внимание, что адрес должен быть зашифрован через команду utils/encrypt (ключи шифрования и метод будут использоваться из блока Utils.Утскнзешщт)
      # Билдер автоматический зашифрует адрес, если он будет лежать в незашифрованном виде
      OwnerAddress: ownerAddress
      # Приватный ключ от адреса, через который будет отправлятсься информация в блокчейн, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      # Обратите внимание, что приватный ключ должен быть зашифрован через команду utils/encrypt (ключи шифрования и метод будут использоваться из блока Utils.Утскнзешщт)
      # Билдер автоматический зашифрует приватный ключ, если он будет лежать в незашифрованном виде
      OwnerPrivateKey: ownerPrivateKey
      # Применимо только для TVM-сетей
      # Публичный ключ от адреса, через который будет отправлятсься информация в блокчейн, обзятельный параметр, при отсуствии билдер заверишится с ошибкой
      # Обратите внимание, что публичный ключ должен быть зашифрован через команду utils/encrypt (ключи шифрования и метод будут использоваться из блока Utils.Утскнзешщт)
      # Билдер автоматический зашифрует публичный ключ, если он будет лежать в незашифрованном виде
      OwnerPublicKey: ownerPublicKey
      # Данное поле указывает, сколько раз попытаться переотправить транзакцию с ивентом на транслятор
      # Например, программа приняла ивент с информацей и отправила в транслятор, но на момент отправки газпрайс аномально увеличился и транзакция находтся в мемпуле.
      # Если транзакция будет находится в мемпуле больше, чем в среднем майнится транзакция (например, для эфира это 5 минут), то программа будет пытаться переотправлять транзакцию
      # Если в данном поле указано 5, то программа будет пытаться отправить 5 раз, если на 5й раз не отправилось, то больше попыток переотправки не будет
      # Необязательное поле, по умолчанию программа будет пытаться отправить 3 раза
      MaxResendTries: 3
      # В данном поле указывается процент увелечения комисии при отправки в процентах.
      # Например программа посчитала комиссию отправки в блокчейн, но в момент отправки газпрайс может увеличиваться.
      # Чтобы покрыть возможный скачок газ прайса, можно указать процент увелечение комиссии
      # Итоговая комиссия будет считаться по форумле: комиссия + (комиссия / 100 * FeeMultiplierPercent)
      # Т.е. если FeeMultiplierPercent установить 100, то комиссия увеличиться в 2 раза, а если FeeMultiplierPercent установить 0, то к комиссии ничего прибавляться не будет
      # Поле необязательное, по умолчанию программа будет считать, что 0, рекомендованное значение 20
      FeeMultiplierPercent: 100
